buildscript {
    ext {
        springBootVersion = '1.2.1.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

apply plugin: 'java'
apply plugin: 'eclipse-wtp'
apply plugin: 'idea'
apply plugin: 'spring-boot' 
apply plugin: 'war'


war {
    baseName = 'ATM2'
    version = '0.0.1-SNAPSHOT'
}
sourceCompatibility = 1.7
targetCompatibility = 1.7

repositories {
    mavenCentral()
}

configurations {
    providedRuntime
}

/*configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
    	if (details.requested.name == 'log4j') {
			details.useTarget "org.slf4j:log4j-over-slf4j:1.7+"
    	}
    	if (details.requested.name == 'commons-logging') {
			details.useTarget "org.slf4j:jcl-over-slf4j:1.7+"
		}
	}
}*/

dependencies {
    compile("org.springframework.boot:spring-boot-starter-data-rest")
    compile("org.springframework.boot:spring-boot-starter-amqp")
    compile("org.springframework.boot:spring-boot-starter-batch")
    compile("org.springframework.boot:spring-boot-starter-jdbc")
    compile("org.springframework.boot:spring-boot-starter-thymeleaf")
    compile("org.springframework.boot:spring-boot-starter-actuator")
    compile("org.springframework.boot:spring-boot-starter-security")
    compile("org.springframework.boot:spring-boot-starter-hornetq")
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.boot:spring-boot-starter-websocket")
    compile("org.springframework.boot:spring-boot-starter-integration")
    compile("org.springframework.boot:spring-boot-starter-ws")
    compile("org.springframework.boot:spring-boot-starter-logging")
    compile("org.springframework.data:spring-data-oracle:1.1.0.RELEASE")
    compile("org.springframework.data:spring-data-jpa")
    compile("commons-cli:commons-cli:1.2")
    compile("org.apache.commons:commons-lang3:3.3.2")
    compile("org.apache.commons:commons-math:2.2")
    compile("commons-jxpath:commons-jxpath:1.3")
    compile("com.h2database:h2")
    compile("mysql:mysql-connector-java:5.1+")
	compile("com.mysema.querydsl:querydsl-apt:1.8.4")
    compile("net.sf.supercsv:super-csv:2+")
    compile("net.sf.dozer:dozer:5+")
    compile("org.webjars:bootstrap:3.0.3")
    compile("org.webjars:jquery:2.0.3-1")
    compile("org.webjars:angularjs:1.3.11")
    compile("org.webjars:angular-ui-bootstrap:0.12.0")
    compile("org.webjars:angular-bootstrap-datetimepicker:0.3.8")
    compile("org.webjars:bootstrapvalidator:0.5.3")
    compile("org.webjars:d3js:3.5.3")
    compile("org.webjars:d3-plugins:a3c809c322")
    compile("org.webjars:d3js:3.5.3")
    compile("org.webjars:metisMenu:1.1.2")
    compile("org.webjars:font-awesome:4.3.0-1")
    compile("org.webjars:flot:0.8.3")
    compile("org.webjars:morrisjs:0.5.1")
    compile("org.webjars:datatables-plugins:ca6ec50")
    compile("javax.servlet:jstl:1.2")
    providedRuntime("org.springframework.boot:spring-boot-starter-tomcat")
    
    testCompile("org.springframework.boot:spring-boot-starter-test")
}

eclipse {
    classpath {
         containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
         containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7'
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.12'
}
